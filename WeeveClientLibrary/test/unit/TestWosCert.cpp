#include "gtest/gtest.h"

#include "wosCert.h"
#include "wosCrypto.h"

namespace
{
class TestWosCert : public testing::Test
{
  protected:
    /********** DATA AND SIGNATURE **********/
    uint8_t signedData[250] = {
        0xd1, 0x35, 0x97, 0x0f, 0x45, 0x0e, 0xad, 0x75, 0x68, 0xcb, 0xfb, 0x48,
        0x1b, 0x04, 0x1e, 0x4b, 0x25, 0x0c, 0x85, 0x18, 0x57, 0x3b, 0xfc, 0xcd,
        0x81, 0x85, 0x42, 0x08, 0xa6, 0x46, 0x60, 0x00, 0x3a, 0x6b, 0x23, 0x03,
        0x53, 0x94, 0xfc, 0xb8, 0x19, 0x7b, 0xa4, 0xc2, 0xb2, 0x5b, 0x90, 0xa6,
        0x36, 0x71, 0xe0, 0x1a, 0xe1, 0x10, 0x21, 0x9a, 0xe7, 0x72, 0x24, 0xa0,
        0xe4, 0xe8, 0x83, 0x42, 0xc5, 0x8b, 0xdf, 0xad, 0x6d, 0xe1, 0xa6, 0x8b,
        0xe8, 0x6f, 0xae, 0x59, 0xdd, 0xca, 0xf9, 0x77, 0x26, 0xe2, 0x9d, 0x17,
        0x7d, 0x22, 0xf8, 0x77, 0xb2, 0x91, 0x5f, 0x45, 0x54, 0x75, 0xfa, 0x18,
        0x4c, 0xa8, 0x60, 0x74, 0x17, 0x8e, 0xde, 0x05, 0x35, 0x20, 0x35, 0x28,
        0xb7, 0xed, 0xb3, 0x2b, 0x8d, 0x39, 0xfe, 0xea, 0x79, 0xb3, 0xba, 0x12,
        0x81, 0xaa, 0x88, 0x0c, 0xf5, 0x6a, 0x32, 0xd1, 0xd7, 0x68, 0xbd, 0x5a,
        0x45, 0x3b, 0xdc, 0x42, 0x4d, 0x65, 0x02, 0xb3, 0x3e, 0xaf, 0xc2, 0xf0,
        0xe6, 0x2d, 0x6b, 0xc6, 0x5c, 0x28, 0x94, 0x68, 0xf6, 0x6c, 0x7f, 0xf0,
        0x45, 0xaf, 0x9b, 0x3c, 0x08, 0xb1, 0xc8, 0x18, 0xb0, 0xa2, 0x97, 0xc7,
        0x62, 0x1c, 0x91, 0xab, 0x3b, 0x43, 0x4c, 0x16, 0x61, 0xf7, 0xab, 0x59,
        0xf8, 0x05, 0xb3, 0xcc, 0x09, 0xdd, 0xb1, 0x68, 0x41, 0x68, 0x1c, 0x33,
        0x9b, 0x58, 0x84, 0x82, 0x0f, 0x95, 0x61, 0x49, 0xd5, 0x3c, 0xe1, 0xf0,
        0x62, 0x82, 0x49, 0xa0, 0x46, 0x8a, 0x68, 0xe0, 0x1d, 0x40, 0xd1, 0x05,
        0x35, 0x2a, 0x58, 0xfc, 0x09, 0xf1, 0xda, 0x9a, 0x22, 0x09, 0xff, 0x97,
        0x29, 0x17, 0x64, 0xa0, 0x67, 0x82, 0x92, 0x17, 0xf8, 0x08, 0xd6, 0x85,
        0x12, 0x16, 0x3d, 0x89, 0x35, 0x88, 0xc4, 0x64, 0xaf, 0x4f};
    uint8_t signature[64] = {
        0x41, 0x0C, 0xCE, 0xE1, 0x67, 0x45, 0x7B, 0xDB, 0x17, 0xF1, 0x8A,
        0x6D, 0x8C, 0x08, 0xDA, 0xB2, 0x0B, 0xF7, 0x99, 0xD7, 0xCA, 0xC4,
        0xF4, 0xEE, 0xC9, 0x5E, 0x46, 0xC5, 0xF1, 0x5B, 0x7A, 0x0B, 0x31,
        0x4D, 0xE4, 0xC7, 0x0B, 0xA0, 0xBB, 0xB2, 0xA6, 0xFB, 0x9B, 0x63,
        0xC9, 0x77, 0x63, 0x2C, 0xDB, 0xEB, 0xAF, 0x33, 0x49, 0x30, 0x91,
        0x18, 0x86, 0x82, 0xBA, 0x60, 0x3D, 0x4F, 0x94, 0x2C};

    /********** CERTIFICATE CHAIN **********/
    uint8_t rootCertData[172] = {
        0x9F, 0x00, 0x58, 0x65, 0x9F, 0x00, 0x00, 0x6D, 0x57, 0x65, 0x65, 0x76,
        0x65, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x6D, 0x57, 0x65,
        0x65, 0x76, 0x65, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x18,
        0x64, 0x58, 0x41, 0x04, 0x6D, 0x0A, 0x3F, 0xBC, 0x7D, 0x27, 0xA0, 0x7C,
        0x89, 0xDA, 0x20, 0x00, 0x6F, 0x2B, 0xDE, 0xF8, 0x91, 0x05, 0x7B, 0xAC,
        0x98, 0x55, 0x11, 0xBC, 0xF4, 0xB1, 0x12, 0xEA, 0xA6, 0xF6, 0x47, 0x46,
        0xD6, 0x9F, 0xE7, 0xB6, 0x82, 0xEA, 0xB9, 0xC9, 0xAF, 0x4A, 0x91, 0x96,
        0xF3, 0xB2, 0x34, 0xD4, 0xE6, 0x6A, 0xBD, 0x41, 0x0F, 0xD4, 0x3E, 0x67,
        0x06, 0xEC, 0xA7, 0xD6, 0x3A, 0xC1, 0x16, 0xAE, 0xFF, 0x58, 0x40, 0xCC,
        0xDE, 0x86, 0x1B, 0xA2, 0x17, 0x23, 0x3E, 0x5E, 0xC0, 0xF3, 0x73, 0xAF,
        0xAB, 0x74, 0xD0, 0x54, 0xA9, 0xB1, 0x07, 0xC4, 0xC0, 0xBE, 0x1C, 0x30,
        0x16, 0x2C, 0x46, 0x96, 0x46, 0x52, 0xE8, 0xD8, 0x78, 0xD0, 0xE6, 0x43,
        0x26, 0x85, 0x46, 0xF6, 0xF0, 0x08, 0xA3, 0x72, 0x74, 0xB3, 0x45, 0xF5,
        0xED, 0x1E, 0x4C, 0x19, 0xC8, 0x6E, 0xD3, 0xCE, 0x21, 0x9E, 0x1C, 0x0B,
        0xA2, 0xE7, 0x87, 0xFF};
    uint8_t interCertData[173] = {
        0x9F, 0x00, 0x58, 0x66, 0x9F, 0x00, 0x00, 0x6D, 0x57, 0x65, 0x65, 0x76,
        0x65, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x6E, 0x57, 0x65,
        0x65, 0x76, 0x65, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x43, 0x41,
        0x18, 0x64, 0x58, 0x41, 0x04, 0x33, 0xDC, 0x22, 0xA5, 0x70, 0xB8, 0x6D,
        0xAF, 0x91, 0x62, 0x41, 0xEB, 0xB1, 0xDE, 0xAD, 0x94, 0x24, 0x12, 0x5D,
        0xB4, 0xE9, 0x8D, 0x14, 0xAC, 0xA0, 0x06, 0x30, 0x3D, 0x87, 0x45, 0x76,
        0x52, 0x85, 0x7A, 0x5E, 0x70, 0xA2, 0x3D, 0xF9, 0x82, 0x6A, 0x4A, 0x6B,
        0x28, 0xB6, 0x27, 0xC2, 0xBE, 0x8F, 0x9E, 0x92, 0x37, 0x25, 0xF0, 0x45,
        0xDD, 0xAB, 0xF0, 0x03, 0xA1, 0xCB, 0x2F, 0x57, 0x43, 0xFF, 0x58, 0x40,
        0xAF, 0x99, 0xF7, 0x76, 0xF0, 0x7D, 0x61, 0x64, 0x16, 0x13, 0xBA, 0xFC,
        0x33, 0xBB, 0x66, 0x57, 0x33, 0x74, 0x8E, 0x5B, 0x4B, 0x88, 0x3F, 0x4D,
        0x93, 0xCD, 0x2E, 0x14, 0xD2, 0xA7, 0x2C, 0x0B, 0x9D, 0x17, 0xC4, 0xD1,
        0x05, 0xAE, 0x5A, 0xD0, 0xA3, 0x99, 0xC8, 0x14, 0xA8, 0xC0, 0x8B, 0xB6,
        0xF5, 0xA6, 0x14, 0x63, 0xDF, 0xA9, 0x7B, 0xA0, 0x3D, 0x22, 0xAC, 0xE9,
        0x7B, 0x74, 0xC9, 0xCE, 0xFF};

    uint8_t userCertData[170] = {
        0x9F, 0x00, 0x58, 0x63, 0x9F, 0x00, 0x00, 0x6E, 0x57, 0x65, 0x65, 0x76,
        0x65, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x43, 0x41, 0x6A, 0x57,
        0x65, 0x65, 0x76, 0x65, 0x20, 0x55, 0x73, 0x65, 0x72, 0x18, 0x64, 0x58,
        0x41, 0x04, 0x5B, 0x6B, 0xB2, 0x66, 0xEB, 0x49, 0x72, 0x14, 0x34, 0x7B,
        0xB9, 0xCE, 0x2B, 0x8F, 0x0F, 0x68, 0x67, 0xA6, 0xBD, 0xF2, 0x89, 0x8C,
        0xDD, 0x24, 0xAB, 0xF7, 0xE0, 0x61, 0x8D, 0x2F, 0x1C, 0x29, 0xA3, 0xFC,
        0x7F, 0x24, 0x3D, 0x76, 0x0C, 0xF8, 0xB0, 0x5D, 0xB0, 0xAD, 0x1B, 0x1A,
        0x4A, 0x1C, 0x4A, 0xBB, 0xB8, 0xCB, 0x1E, 0xA7, 0xE6, 0x36, 0x24, 0x6E,
        0x04, 0x98, 0x31, 0xD1, 0xF6, 0x7F, 0xFF, 0x58, 0x40, 0x36, 0x87, 0xE8,
        0xD1, 0xE4, 0xA0, 0x5B, 0x57, 0xA2, 0x34, 0x37, 0x41, 0x68, 0xF5, 0x41,
        0x06, 0xCF, 0xAC, 0x2E, 0x18, 0xBF, 0x1B, 0x36, 0xDE, 0x5C, 0xBC, 0x9F,
        0x5F, 0xC8, 0x08, 0x1B, 0x9C, 0x0E, 0xD7, 0x8E, 0xC5, 0x04, 0xAE, 0x7F,
        0x5C, 0x9D, 0x71, 0x13, 0xF4, 0x85, 0x7A, 0x6F, 0xAC, 0xEF, 0x20, 0x11,
        0x89, 0xE8, 0x61, 0x4F, 0x45, 0xAA, 0xA0, 0x52, 0x21, 0x17, 0x67, 0xDD,
        0x61, 0xFF};

    virtual void SetUp() {}

    virtual void TearDown() {}
};

TEST_F(TestWosCert, Trivial)
{
    WosBuffer_t pData = {.data = signedData, .length = sizeof(signedData)};
    WosBuffer_t pSignature = {.data = signature, .length = sizeof(signature)};
    WosBuffer_t pRootCert = {.data = rootCertData,
                             .length = sizeof(rootCertData)};
    WosBuffer_t pInterCert = {.data = interCertData,
                              .length = sizeof(interCertData)};
    WosBuffer_t pUserCert = {.data = userCertData,
                             .length = sizeof(userCertData)};

    WosCryptoError_t cryptoResult = WOS_CRYPTO_ERROR;
    WosCryptoConfig_t cryptoConfig;

    /* Certificate */
    WosCertError_t certError = WOS_CERT_ERROR;
    WosCertOptions_t certOptions;
    uint8_t numCerts = 2;
    WosBuffer_t *ppCerts[2];

    ppCerts[0] = &pUserCert;
    ppCerts[1] = &pInterCert;

    cryptoResult = wosCryptoInitialize(&cryptoConfig);
    EXPECT_EQ(cryptoResult, WOS_CRYPTO_SUCCESS);

    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_SIGNATURE_MATCH);

    cryptoResult = wosCryptoTerminate();
    EXPECT_EQ(cryptoResult, WOS_CRYPTO_SUCCESS);
}

TEST_F(TestWosCert, Negative)
{
    WosBuffer_t pData = {.data = signedData, .length = sizeof(signedData)};
    WosBuffer_t pSignature = {.data = signature, .length = sizeof(signature)};
    WosBuffer_t pRootCert = {.data = rootCertData,
                             .length = sizeof(rootCertData)};
    WosBuffer_t pInterCert = {.data = interCertData,
                              .length = sizeof(interCertData)};
    WosBuffer_t pUserCert = {.data = userCertData,
                             .length = sizeof(userCertData)};

    /* Certificate */
    WosCertError_t certError = WOS_CERT_ERROR;
    WosCertOptions_t certOptions;
    uint8_t numCerts = 2;
    WosBuffer_t *ppCerts[2];

    ppCerts[0] = &pUserCert;
    ppCerts[1] = &pInterCert;

    /* Certificate Validation Options */
    certError = wosCertValidateData(NULL, &pRootCert, numCerts, ppCerts, &pData,
                                    &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);

    /* Root Certificate */
    certError = wosCertValidateData(&certOptions, NULL, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pRootCert = {.data = NULL, .length = sizeof(rootCertData)};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pRootCert = {.data = rootCertData, .length = 0};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pRootCert = {.data = rootCertData, .length = sizeof(rootCertData)};

    /* Certificate Chain Length */
    certError = wosCertValidateData(&certOptions, &pRootCert, 4, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);

    /* Certificate Chain */
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, NULL,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    ppCerts[0] = NULL;
    ppCerts[1] = &pInterCert;
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    ppCerts[0] = &pUserCert;
    ppCerts[1] = NULL;
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    ppCerts[0] = &pUserCert;
    ppCerts[1] = &pInterCert;

    /* Data */
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    NULL, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pData = {.data = NULL, .length = sizeof(signedData)};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pData = {.data = signedData, .length = 0};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pData = {.data = signedData, .length = sizeof(signedData)};

    /* Signature */
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, NULL);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pSignature = {.data = NULL, .length = sizeof(signature)};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pSignature = {.data = signature, .length = 0};
    certError = wosCertValidateData(&certOptions, &pRootCert, numCerts, ppCerts,
                                    &pData, &pSignature);
    EXPECT_EQ(certError, WOS_CERT_ERROR_BAD_PARAMS);
    pSignature = {.data = signature, .length = sizeof(signature)};
}

} // namespace
